name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PYTHON_VERSION: '3.9'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r production_flasherv1.2/requirements.txt

      - name: Run tests (if any)
        run: |
          # Add your test commands here
          # python -m pytest tests/ -v
          echo "No tests configured yet"

      - name: Create version info
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version $VERSION"

      - name: Create distribution archive
        run: |
          # Create clean dist directory
          rm -rf dist/
          mkdir -p dist/

          # Create version-specific directory
          RELEASE_DIR="dino-production-flasher-${VERSION}"
          mkdir -p "$RELEASE_DIR"

          # Copy files (exclude .git and other unnecessary files)
          cp -r production_flasherv1.2 "$RELEASE_DIR/"
          cp -r install.sh install.bat INSTALL.md CHANGELOG.md install.sh "$RELEASE_DIR/"
          cp .gitignore "$RELEASE_DIR/"

          # Create README for release
          cat > "$RELEASE_DIR/README.md" << 'EOF'
# ðŸ¦• DinoCore Production Flasher v${VERSION}

A comprehensive suite of Python-based tools for flashing and managing ESP32-S3 devices for the DinoCore project.

## ðŸš€ Quick Install

### Windows
Double-click `install.bat` to install automatically.

### Linux/macOS
```bash
chmod +x install.sh
./install.sh
```

## ðŸ“– Full Documentation

See INSTALL.md for complete installation and usage instructions.

## ðŸ†• What's New in v${VERSION}

EOF

          # Add changelog excerpt to README
          if [ -f CHANGELOG.md ]; then
            echo "## [${VERSION}] - $(date +%Y-%m-%d)" >> "$RELEASE_DIR/README.md"
            # Extract the latest changelog entry (simplified)
            awk '/^## \['"${VERSION}"'/{found=1; print; next} found && /^## \[/{exit} found' CHANGELOG.md | head -20 >> "$RELEASE_DIR/README.md"
          fi

          # Create ZIP archive
          zip -r "dist/dino-production-flasher-${VERSION}.zip" "$RELEASE_DIR"

          # Create TAR.GZ archive
          tar -czf "dist/dino-production-flasher-${VERSION}.tar.gz" "$RELEASE_DIR"

          # Clean up
          rm -rf "$RELEASE_DIR"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body_path: .github/release-body.md
          draft: false
          prerelease: false

      - name: Upload ZIP asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/dino-production-flasher-${{ env.VERSION }}.zip
          asset_name: dino-production-flasher-${{ env.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload TAR.GZ asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/dino-production-flasher-${{ env.VERSION }}.tar.gz
          asset_name: dino-production-flasher-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip

  test-release:
    name: Test Installation on Multiple OS
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r production_flasherv1.2/requirements.txt

      - name: Test basic imports
        run: |
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import requests, serial, esptool; print('âœ… Core dependencies available')"
          python -c "from production_flasherv1.2.updater import DinoUpdater; print('âœ… Updater module loads')"
          python -c "from production_flasherv1.2.dino_console import DinoConsole; print('âœ… Console module loads')"

      - name: Test updater functionality
        run: |
          python production_flasherv1.2/updater.py --help

      - name: Test console basic functionality
        run: |
          # Test console startup (won't run interactively)
          timeout 10 python production_flasherv1.2/dino_console.py 1.9.0 --help || true
          echo "âœ… Basic functionality tests completed"
